services:

  cassandra:
    build: ./cassandra
    container_name: sMall_cassandra
    ports:
      - "${CASSANDRA_PORT}:${CASSANDRA_PORT}"
    env_file:
      - .env
    volumes:
      - ./cassandra/cassandra.yaml:/etc/cassandra/cassandra.yaml # override
#      - cassandra-data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -u ${CASSANDRA_USER} -p ${CASSANDRA_PWD} -e 'DESCRIBE KEYSPACES;'"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 4m

  mysql:
    image: mysql:8.0
    container_name: sMall_mysql
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PWD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PWD}
      MYSQL_DATABASE: ${MYSQL_DB}
    restart: unless-stopped
#    volumes:
#      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PWD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:latest
    container_name: sMall_redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    restart: unless-stopped
    command: [ "redis-server", "--requirepass", "${REDIS_PWD}" ]
#    volumes:
#      - redis-data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: sMall_zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: sMall_kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:${KAFKA_INTERNAL_PORT},EXTERNAL://0.0.0.0:${KAFKA_EXTERNAL_PORT}
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://sMall_kafka:${KAFKA_INTERNAL_PORT},EXTERNAL://localhost:${KAFKA_EXTERNAL_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost ${KAFKA_INTERNAL_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: sMall_kafka_ui
    ports:
      - "9091:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:${KAFKA_INTERNAL_PORT}
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:${ZOOKEEPER_PORT}
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_started

  service-discoverer:
    build:
      context: .
      dockerfile: service-discoverer/Dockerfile
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${EUREKA_PORT}/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
#      start_interval: 5s

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    environment:
      - SPRING_PROFILES_ACTIVE=docker # switch to application-docker.properties
    depends_on:
      redis:
        condition: service_started
      service-discoverer:
        condition: service_healthy

  account-service:
    build:
      context: .
      dockerfile: account-service/Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker # switch to application-docker.properties
    depends_on:
      mysql:
        condition: service_healthy
      service-discoverer:
        condition: service_healthy

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker # switch to application-docker.properties
    depends_on:
      account-service:
        condition: service_started
        # health check directly with account-service makes no sense
        # because they communicate via service discoverer
      redis:
        condition: service_started
      mysql:
        condition: service_healthy
      service-discoverer:
        condition: service_healthy

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    ports:
      # The ports should NOT be exposed but only be accessed by internal services.
      # We expose the port as we (from the host) simulate a delivery service calling the "complete order" endpoint.
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"
    environment:
      - SPRING_PROFILES_ACTIVE=docker # switch to application-docker.properties
    depends_on:
      cassandra:
        condition: service_healthy
      kafka:
        condition: service_healthy
      service-discoverer:
        condition: service_healthy

  payment-service:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker # switch to application-docker.properties
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
      service-discoverer:
        condition: service_healthy

#volumes:
#  redis-data:
#  cassandra-data:
#  mysql_data: